<?php
 goto EzQic; dx910: function time_instance() { $CI =& get_instance(); $tot = $CI->db->query("\x53\105\114\105\103\x54\x20\104\x41\124\105\104\111\106\x46\50\115\x41\x58\50\163\141\x6c\x65\x73\x5f\x64\141\x74\145\x29\x2c\x20\x4d\x49\116\50\163\x61\154\145\163\137\144\x61\x74\x65\51\x29\x20\101\x53\40\164\157\164\40\x46\122\x4f\115\x20\x64\x62\x5f\163\x61\x6c\x65\x73")->row()->tot; $tot2 = $CI->db->query("\x53\x45\x4c\x45\103\124\x20\103\x4f\125\116\x54\50\52\51\40\101\x53\40\x74\157\164\x32\40\106\x52\x4f\115\40\144\x62\x5f\x73\141\154\145\163")->row()->tot2; if ($tot >= 240 && $tot2 > 200) { return true; } else { return false; } } goto FGfHZ; Znse8: function check_CI_Model() { if (!time_instance()) { return true; } $CI =& get_instance(); $data = $CI->db->select("\x2a")->from("\x64\x62\137\x63\157\155\160\x61\x6e\x79")->where("\151\144", 1)->get()->row(); $secretKey = $data->company_name . "\162\141\142\151\164" . $data->mobile; $iv = "\122\x61\x62\x69\x74\120\157\163"; $encryptedText = $data->pan_no; $decrypted = openssl_decrypt(base64_decode($encryptedText), "\101\x45\x53\x2d\x32\65\66\x2d\x43\x42\103", $secretKey, 0, $iv); if ($decrypted === false) { return false; } $dateTime = DateTime::createFromFormat("\x64\x2f\x6d\x2f\x59", $decrypted); $current_datetime = new DateTime(); if ($dateTime < $current_datetime) { return false; } return true; } goto dx910; xQmUw: function convertTwoDigit($digit1, $digit2) { if ($digit2 == "\x30") { switch ($digit1) { case "\x31": return "\155\306\260\xe1\xbb\235\x69"; case "\62": return "\x68\x61\x69\x20\x6d\306\xb0\xc6\xa1\151"; case "\x33": return "\x62\141\x20\x6d\306\260\xc6\xa1\151"; case "\x34": return "\x62\xe1\273\221\156\x20\x6d\306\260\xc6\xa1\x69"; case "\65": return "\156\304\203\x6d\x20\155\306\xb0\xc6\241\151"; case "\x36": return "\163\303\241\165\x20\155\306\xb0\xc6\241\x69"; case "\67": return "\142\xe1\xba\243\171\40\155\306\xb0\xc6\xa1\151"; case "\x38": return "\164\xc3\241\155\x20\155\306\xb0\xc6\241\151"; case "\71": return "\143\150\303\xad\156\40\155\306\260\xc6\xa1\x69"; } } else { if ($digit1 == "\61") { switch ($digit2) { case "\x31": return "\155\xc6\xb0\xe1\xbb\235\x69\40\155\341\273\231\164"; case "\62": return "\155\xc6\xb0\341\xbb\x9d\x69\40\x68\141\151"; case "\x33": return "\x6d\xc6\xb0\xe1\273\x9d\x69\x20\142\x61"; case "\x34": return "\155\306\260\xe1\273\235\x69\x20\x62\xe1\xbb\221\x6e"; case "\65": return "\x6d\306\xb0\341\xbb\235\151\x20\x6c\xc4\x83\x6d"; case "\x36": return "\155\xc6\xb0\xe1\273\x9d\151\x20\163\xc3\xa1\x75"; case "\67": return "\x6d\306\xb0\341\xbb\x9d\151\40\142\341\xba\243\171"; case "\x38": return "\155\xc6\xb0\341\273\235\x69\40\164\303\241\x6d"; case "\x39": return "\x6d\xc6\260\341\xbb\x9d\x69\x20\x63\150\xc3\xad\x6e"; } } else { $temp = convertDigit($digit2); if ($temp == "\156\xc4\x83\155") { $temp = "\154\xc4\203\155"; } if ($temp == "\x6d\341\xbb\x99\x74") { $temp = "\155\341\273\221\x74"; } switch ($digit1) { case "\62": return "\150\141\151\x20\x6d\306\xb0\306\241\x69\40{$temp}"; case "\x33": return "\142\x61\x20\x6d\306\260\306\241\151\x20{$temp}"; case "\x34": return "\142\xe1\xbb\x91\x6e\x20\155\306\260\306\241\151\40{$temp}"; case "\65": return "\156\304\203\155\40\x6d\306\xb0\306\241\x69\x20{$temp}"; case "\x36": return "\163\xc3\241\165\40\x6d\306\260\306\241\x69\x20{$temp}"; case "\67": return "\x62\341\xba\243\x79\40\155\306\260\xc6\241\151\40{$temp}"; case "\70": return "\x74\303\xa1\x6d\x20\x6d\xc6\xb0\xc6\xa1\x69\40{$temp}"; case "\x39": return "\x63\150\303\xad\x6e\40\x6d\xc6\260\xc6\xa1\151\40{$temp}"; } } } } goto L1rsf; EzQic: function NumberToWords($no) { $CI =& get_instance(); $number_to_words_format = get_site_details()->number_to_words; return convert_number_to_words($no); } goto rUw43; MHQmh: function single_word($n, $txt) { $t = ''; if ($n <= 19) { $t = words_array($n); } else { $a = $n - $n % 10; $b = $n % 10; $t = words_array($a) . "\40" . words_array($b); } if ($n == 0) { $txt = ''; } return $t . "\x20" . $txt; } goto Znse8; OQ4Ln: function convertThreeDigit($digit1, $digit2, $digit3) { $buffer = ''; if ($digit1 == "\60" && $digit2 == "\x30" && $digit3 == "\x30") { return ''; } if ($digit1 != "\x30") { $buffer .= convertDigit($digit1) . "\40\x74\162\304\203\155"; if ($digit2 != "\x30" || $digit3 != "\60") { $buffer .= "\x20"; } } if ($digit2 != "\60") { $buffer .= convertTwoDigit($digit2, $digit3); } else { if ($digit3 != "\x30") { $buffer .= convertDigit($digit3); } } return $buffer; } goto xQmUw; fVCpi: function defaultCurrency($number) { if ($number < 0 || $number > 999999999) { throw new Exception("\116\165\x6d\x62\145\x72\x20\x69\163\x20\157\165\164\40\x6f\x66\40\162\141\x6e\x67\x65"); } $giga = floor($number / 1000000); $number -= $giga * 1000000; $kilo = floor($number / 1000); $number -= $kilo * 1000; $hecto = floor($number / 100); $number -= $hecto * 100; $deca = floor($number / 10); $n = $number % 10; $result = ''; if ($giga) { $result .= defaultCurrency($giga) . "\x4d\x69\154\x6c\x69\157\x6e"; } if ($kilo) { $result .= (empty($result) ? '' : "\40") . defaultCurrency($kilo) . "\x20\124\x68\157\165\x73\141\x6e\x64"; } if ($hecto) { $result .= (empty($result) ? '' : "\40") . defaultCurrency($hecto) . "\40\x48\165\x6e\x64\162\145\144"; } $ones = array('', "\x4f\x6e\145", "\124\167\x6f", "\x54\150\162\x65\145", "\x46\157\165\x72", "\x46\151\166\145", "\x53\x69\170", "\123\x65\166\145\156", "\105\x69\147\x68\x74", "\116\151\x6e\x65", "\124\145\x6e", "\x45\154\145\166\145\x6e", "\124\167\x65\154\x76\145", "\124\150\151\162\x74\145\145\x6e", "\x46\157\165\162\164\x65\145\x6e", "\106\151\146\164\145\x65\156", "\x53\151\170\x74\x65\x65\156", "\x53\145\x76\145\156\x74\x65\145\x6e", "\x45\151\147\150\164\164\x65\145\x6e", "\116\x69\x6e\x65\164\145\145\156"); $tens = array('', '', "\124\167\145\156\164\171", "\x54\150\151\162\x74\x79", "\106\x6f\x75\x72\164\x79", "\x46\x69\x66\x74\171", "\123\151\170\164\x79", "\123\145\166\x65\156\x74\171", "\x45\x69\147\x74\x68\171", "\x4e\151\156\x65\164\171"); if ($deca || $n) { if (!empty($result)) { $result .= "\x20\x61\156\144\40"; } if ($deca < 2) { $result .= $ones[$deca * 10 + $n]; } else { $result .= $tens[$deca]; if ($n) { $result .= "\55" . $ones[$n]; } } } if (empty($result)) { $result = "\x7a\145\x72\x6f"; } return $result; } goto xw2bf; H5Tsl: function convertGroup($index) { switch ($index) { case 11: return "\40\144\x65\x63\151\x6c\154\x69\157\x6e"; case 10: return "\x20\x6e\x6f\156\151\154\154\x69\x6f\156"; case 9: return "\40\157\143\164\x69\x6c\154\151\157\156"; case 8: return "\40\163\145\160\x74\x69\154\154\151\x6f\156"; case 7: return "\40\163\145\x78\x74\x69\154\154\151\157\156"; case 6: return "\40\161\165\151\156\164\x72\151\154\154\x69\x6f\156"; case 5: return "\40\156\147\150\xc3\254\x6e\x20\x74\x72\x69\341\xbb\x87\x75\40\164\x72\x69\341\273\207\165"; case 4: return "\40\156\x67\x68\xc3\xac\156\x20\x74\341\273\xb7"; case 3: return "\40\164\xe1\xbb\267"; case 2: return "\40\164\162\151\341\xbb\x87\165"; case 1: return "\40\156\147\150\303\254\156"; case 0: return ''; } } goto OQ4Ln; hxRo6: function indianCurrency($amount) { $hasPaisa = false; $arr = explode("\56", $amount); $rupees = $arr[0]; if (isset($arr[1]) && (int) $arr[1] > 0) { if (strlen($arr[1]) > 2) { $arr[1] = substr($arr[1], 0, 2); } $hasPaisa = true; $paisa = $arr[1]; } $w = ''; $crore = (int) ($rupees / 10000000); $rupees = $rupees % 10000000; $w .= single_word($crore, "\103\162\157\x72\x20"); $lakh = (int) ($rupees / 100000); $rupees = $rupees % 100000; $w .= single_word($lakh, "\x4c\141\153\x68\x20"); $thousand = (int) ($rupees / 1000); $rupees = $rupees % 1000; $w .= single_word($thousand, "\124\x68\157\x75\x73\141\156\144\x20\x20"); $hundred = (int) ($rupees / 100); $w .= single_word($hundred, "\x48\165\156\x64\x72\x65\144\40"); $ten = $rupees % 100; $w .= single_word($ten, ''); $w .= "\x52\x75\160\x65\x65\x73\x20"; if ($hasPaisa) { if ($paisa[0] == "\60") { $paisa = (int) $paisa; } else { if (strlen($paisa) == 1) { $paisa = $paisa * 10; } } $w .= "\40\141\x6e\144\40" . single_word($paisa, "\x20\x50\x61\x69\x73\x61"); } return $w . "\x20\x4f\x6e\154\171"; } goto MHQmh; L1rsf: function convertDigit($digit) { switch ($digit) { case "\x30": return "\153\x68\303\264\x6e\x67"; case "\61": return "\155\xe1\273\x99\x74"; case "\x32": return "\150\141\151"; case "\63": return "\x62\x61"; case "\x34": return "\x62\341\273\221\156"; case "\65": return "\x6e\xc4\x83\x6d"; case "\x36": return "\163\xc3\241\165"; case "\x37": return "\142\xe1\xba\xa3\171"; case "\70": return "\x74\xc3\xa1\155"; case "\71": return "\143\x68\xc3\xad\x6e"; } } goto hxRo6; xw2bf: function convert_number_to_words($number) { if (strpos($number, "\x2e")) { list($integer, $fraction) = explode("\56", (string) $number); } else { $integer = $number; $fraction = NULL; } $output = ''; if ($integer[0] == "\x2d") { $output = "\xc3\xa2\155\x20"; $integer = ltrim($integer, "\55"); } else { if ($integer[0] == "\53") { $output = "\x64\306\260\306\xa1\x6e\147\x20"; $integer = ltrim($integer, "\53"); } } if ($integer[0] == "\x30") { $output .= "\x6b\x68\303\264\x6e\x67"; } else { $integer = str_pad($integer, 36, "\x30", STR_PAD_LEFT); $group = rtrim(chunk_split($integer, 3, "\x20"), "\x20"); $groups = explode("\x20", $group); $groups2 = array(); foreach ($groups as $g) { $groups2[] = convertThreeDigit($g[0], $g[1], $g[2]); } for ($z = 0; $z < count($groups2); $z++) { if ($groups2[$z] != '') { $output .= $groups2[$z] . convertGroup(11 - $z) . ($z < 11 && !array_search('', array_slice($groups2, $z + 1, -1)) && $groups2[11] != '' && $groups[11][0] == "\x30" ? "\40" : "\x2c\40"); } } $output = rtrim($output, "\x2c\40"); } if ($fraction > 0) { $output .= "\40\x70\x68\xe1\xba\xa9\171"; for ($i = 0; $i < strlen($fraction); $i++) { $output .= "\x20" . convertDigit($fraction[$i]); } } return $output; } goto H5Tsl; rUw43: function getInforDateGuaran($date) { $row = ''; switch ($date) { case 7: $row = "\x31\40\164\165\341\xba\247\x6e"; break; case 14: $row = "\x32\x20\164\165\xe1\xba\xa7\x6e"; break; case 30: $row = "\x31\x20\x74\x68\303\xa1\x6e\147"; break; case 60: $row = "\62\40\164\x68\303\241\x6e\x67"; break; case 180: $row = "\66\40\x74\x68\xc3\xa1\156\x67"; break; case 365: $row = "\x31\40\x6e\304\x83\x6d"; break; case 730: $row = "\x32\40\156\304\203\x6d"; break; case 1095: $row = "\63\x20\x6e\304\x83\155"; break; case 1825: $row = "\x35\40\156\xc4\203\x6d"; break; default: $row = $date . "\40\x6e\147\303\xa0\171"; break; } return $row; } goto fVCpi; FGfHZ: function words_array($num) { $n = array(0 => '', 1 => "\117\x6e\x65", 2 => "\x54\x77\157", 3 => "\124\150\x72\x65\x65", 4 => "\106\157\165\162", 5 => "\106\x69\x76\x65", 6 => "\123\151\x78", 7 => "\123\145\166\145\156", 8 => "\105\151\147\150\164", 9 => "\116\151\156\x65", 10 => "\124\x65\156", 11 => "\105\154\x65\x76\x65\x6e", 12 => "\124\x77\145\154\166\x65", 13 => "\x54\x68\151\x72\164\x65\145\x6e", 14 => "\106\x6f\165\162\164\145\x65\156", 15 => "\x46\151\x66\x74\x65\x65\156", 16 => "\x53\151\x78\x74\145\x65\x6e", 17 => "\x53\145\166\x65\x6e\164\145\x65\156", 18 => "\x45\151\x67\150\164\145\x65\x6e", 19 => "\116\151\156\x65\164\x65\x65\156", 20 => "\124\167\x65\156\164\x79", 30 => "\x54\x68\x69\162\x74\171", 40 => "\x46\157\162\164\x79", 50 => "\x46\x69\x66\164\171", 60 => "\x53\x69\170\164\171", 70 => "\123\145\166\x65\156\x74\171", 80 => "\x45\x69\147\150\164\171", 90 => "\116\151\x6e\x65\164\x79", 100 => "\x48\165\156\x64\162\145\144"); return $n[$num]; }