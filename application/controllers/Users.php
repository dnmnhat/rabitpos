<?php
 class Users extends MY_Controller { public function __construct() { parent::__construct(); $this->load_global(); $this->load->model("\163\x74\x61\x74\145\x5f\x6d\157\144\145\154", "\163\x74\x61\164\x65"); } public function index() { $this->permission_check("\165\x73\x65\162\163\x5f\141\x64\144"); $data = $this->data; $data["\160\141\x67\145\x5f\x74\x69\x74\154\145"] = $this->lang->line("\x63\162\145\x61\x74\x65\137\x75\x73\145\x72\x73"); $this->load->view("\165\x73\145\x72\163", $data); } public function save_or_update() { $data = $this->data; $this->form_validation->set_rules("\155\x6f\142\151\x6c\x65", "\x4d\157\x62\151\154\x65", "\x72\x65\x71\x75\151\x72\145\x64\174\164\x72\151\x6d"); $this->form_validation->set_rules("\145\x6d\x61\x69\x6c", "\105\155\x61\x69\x6c", "\x72\145\161\x75\151\x72\145\x64\174\166\141\154\151\144\137\x65\155\x61\151\x6c"); if ($this->input->post("\143\157\155\155\x61\156\144") == "\163\141\x76\x65") { $this->form_validation->set_rules("\160\x61\163\x73", "\120\141\x73\x73\167\157\x72\144", "\x72\x65\x71\x75\x69\162\x65\144\x7c\x74\162\151\155\x7c\155\151\156\x5f\154\x65\156\x67\164\x68\133\x35\x5d\174\x6d\141\170\x5f\x6c\x65\156\x67\164\150\133\61\62\135"); $this->form_validation->set_rules("\156\x65\x77\x5f\x75\x73\145\162", "\x55\163\145\162\156\141\155\x65", "\162\145\x71\x75\x69\x72\x65\144\x7c\x74\162\x69\155\174\x6d\x69\x6e\x5f\x6c\x65\x6e\x67\x74\150\x5b\65\x5d\x7c\x6d\141\170\137\x6c\145\x6e\x67\164\x68\133\61\62\x5d"); $this->form_validation->set_rules("\x72\x6f\154\145\137\151\x64", "\x52\157\154\145", "\162\145\161\x75\x69\162\145\144\x7c\164\x72\151\x6d"); } if ($this->form_validation->run() == TRUE) { $this->load->model("\x75\x73\x65\x72\163\137\x6d\x6f\144\145\x6c"); if ($this->input->post("\x63\157\155\x6d\x61\156\144") != "\165\x70\x64\x61\164\145") { $result = $this->users_model->verify_and_save(); } else { $q_id = $this->input->post("\161\137\x69\144"); $data["\161\137\151\144"] = $q_id; $result = $this->users_model->verify_and_update($data); } echo $result; } else { echo validation_errors(); } } public function view() { $this->permission_check("\x75\x73\x65\x72\x73\x5f\x76\151\x65\x77"); $data = $this->data; $data["\160\x61\x67\145\137\164\x69\x74\x6c\x65"] = $this->lang->line("\x75\163\145\x72\163\x5f\154\151\x73\164"); $this->load->view("\x75\163\145\162\163\55\166\x69\x65\167", $data); } public function status_update() { $this->permission_check_with_msg("\x75\163\145\162\163\137\x65\x64\x69\x74"); $userid = $this->input->post("\151\x64"); $status = $this->input->post("\x73\x74\141\x74\165\x73"); $this->load->model("\x75\x73\x65\x72\163\x5f\x6d\157\x64\145\x6c"); $result = $this->users_model->status_update($userid, $status); return $result; } public function password_reset() { $data = $this->data; $data["\x70\x61\147\x65\137\164\151\164\x6c\145"] = $this->lang->line("\x63\150\141\x6e\x67\x65\x5f\x70\141\163\163\167\157\162\144"); $this->load->view("\x63\x68\141\x6e\x67\145\55\x70\141\x73\x73", $data); } public function password_update() { if ($this->session->userdata("\x69\x6e\x76\x5f\x75\x73\x65\162\x6e\x61\x6d\x65") == "\x61\x64\x6d\151\x6e" && demo_app()) { echo "\x52\x65\x73\x74\x72\151\143\x74\x65\144\x20\x41\x64\155\x69\156\40\x50\141\163\163\167\157\162\144\40\x43\x68\141\x6e\x67\145"; die; } $data = $this->data; $currentpass = $this->input->post("\143\x75\162\162\x65\156\164\x70\141\163\163"); $newpass = $this->input->post("\156\x65\167\160\x61\x73\x73"); $this->load->model("\x75\163\145\162\x73\x5f\155\157\144\145\x6c"); $result = $this->users_model->password_update(md5($currentpass), md5($newpass), $data); echo $result; } public function dbbackup() { $this->permission_check_with_msg("\163\x69\164\145\137\x65\x64\x69\x74"); if (demo_app()) { echo "\x52\145\x73\164\x72\151\143\x74\x65\144\40\151\156\x20\x44\x65\155\x6f"; die; } if (!isBakup()) { echo "\x43\x68\341\273\xa9\143\x20\x6e\xc4\203\x6e\x67\x20\143\150\xe1\xbb\x89\x20\x68\xe1\xbb\x97\x20\164\x72\341\273\xa3\x20\142\341\xba\243\x6e\40\x74\x68\xc6\260\xc6\xa1\x6e\x67\40\155\xe1\272\xa1\x69"; die; } $subdomain_ = getPathFolder(); $file_name = $config["\144\141\x74\141\x62\141\x73\x65"]; $this->load->dbutil(); $prefs = array("\x6e\x65\167\x6c\x69\156\145" => "\12", "\146\x6f\162\x6d\141\164" => "\172\x69\160", "\x66\x69\x6c\145\x6e\141\155\145" => $file_name, "\x66\x6f\162\145\x69\x67\156\137\x6b\145\x79\137\x63\150\145\143\153\163" => FALSE); $backup = $this->dbutil->backup($prefs); $this->load->helper("\x66\151\154\x65"); $path_file_ = $subdomain_; write_file("\x64\142\142\141\x63\x6b\x75\x70\x2f" . $path_file_ . "\137\144\x62" . date("\x5f\x64\55\x6d\x2d\x59\55\150\55\x6d\x2d\163") . "\56\x67\172", $backup); $this->load->helper("\144\157\167\x6e\x6c\157\x61\x64"); force_download($path_file_ . "\137\x64\142" . date("\137\144\55\x6d\55\131\x2d\150\x2d\155\x2d\x73") . "\x2e\147\172", $backup); } public function imagesbackup() { $this->permission_check_with_msg("\163\151\164\x65\x5f\x65\144\x69\x74"); if (demo_app()) { echo "\122\145\x73\164\x72\x69\x63\x74\x65\144\40\151\156\x20\x44\145\x6d\x6f"; die; } if (!isBakup()) { echo "\103\150\341\273\xa9\x63\x20\156\304\203\156\147\x20\143\150\341\xbb\211\x20\x68\341\xbb\227\x20\164\162\xe1\xbb\xa3\x20\x62\341\272\xa3\x6e\x20\164\150\xc6\260\xc6\xa1\156\x67\40\155\341\272\xa1\151"; die; } $subdomain_ = getPathFolder(); $sourceFolder = "\165\x70\154\157\x61\144\163\x2f" . $subdomain_; if (!is_dir($sourceFolder)) { if (mkdir($sourceFolder, 493, true)) { } } $zipFileName = "\165\x70\x6c\157\x61\144\163\57" . $subdomain_ . "\x5f\144\x61\x74\x61" . date("\x5f\x64\x2d\x6d\x2d\131\x2d\x68\x2d\155\x2d\x73") . "\56\x7a\151\160"; $zip = new ZipArchive(); if ($zip->open($zipFileName, ZipArchive::CREATE) === TRUE) { function addFolderToZip($folder, $zip, $exclusiveLength) { $folderHandle = opendir($folder); while (false !== ($file = readdir($folderHandle))) { if ($file != "\56" && $file != "\x2e\x2e") { $filePath = $folder . "\57" . $file; $localPath = substr($filePath, $exclusiveLength); if (is_file($filePath)) { $zip->addFile($filePath, $localPath); } elseif (is_dir($filePath)) { $zip->addEmptyDir($localPath); addFolderToZip($filePath, $zip, $exclusiveLength); } } } closedir($folderHandle); } addFolderToZip($sourceFolder, $zip, strlen($sourceFolder) + 1); $zip->close(); } if (file_exists($zipFileName)) { header("\x43\157\x6e\164\x65\x6e\x74\x2d\104\x65\x73\143\x72\151\160\x74\x69\157\x6e\x3a\40\x46\151\154\145\40\x54\x72\x61\156\x73\146\145\162"); header("\103\157\156\164\x65\156\x74\x2d\124\171\160\145\x3a\40\x61\x70\160\154\151\x63\x61\164\x69\x6f\156\x2f\x7a\151\x70"); header("\x43\157\x6e\x74\x65\156\164\55\x44\x69\163\x70\157\x73\x69\164\151\157\156\72\x20\141\x74\x74\x61\143\150\155\x65\x6e\x74\x3b\x20\146\x69\x6c\x65\156\141\x6d\145\x3d\x22" . basename($zipFileName) . "\42"); header("\103\x6f\x6e\x74\145\x6e\164\55\x4c\x65\x6e\147\x74\x68\72\40" . filesize($zipFileName)); readfile($zipFileName); unlink($zipFileName); } else { echo "\103\xc3\263\40\154\xe1\273\227\x69\x20\x74\162\157\x6e\147\40\161\165\xc3\xa1\x20\x74\162\xc3\xac\156\150\40\x6e\303\251\156\x20\164\x68\xc6\xb0\40\155\341\273\xa5\143\x2e"; } } public function edit($id) { $this->permission_check("\x75\x73\145\x72\x73\x5f\145\x64\151\x74"); $this->load->model("\x75\x73\x65\162\x73\x5f\x6d\157\144\145\x6c"); $data = $this->users_model->get_details($id); $data["\x70\x61\x67\x65\x5f\x74\151\164\x6c\x65"] = $this->lang->line("\x65\x64\x69\x74\x5f\x75\163\x65\162"); $this->load->view("\x75\163\145\x72\163", $data); } public function delete_user() { $this->permission_check_with_msg("\165\163\145\x72\163\137\x64\145\x6c\145\164\145"); $this->load->model("\165\x73\x65\x72\x73\137\x6d\157\144\145\154"); $id = $this->input->post("\161\x5f\151\144"); $result = $this->users_model->delete_user($id); return $result; } }